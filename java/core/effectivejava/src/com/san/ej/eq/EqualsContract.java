/**
 * Points to learn
 * ---------------
 * 1.a- instanceof tests whether the thing on the LHS is an instance of the type on
 * 		 the RHS or some subtype.(e.g., "aa" instanceOf String,Object - true)
 * 		instanceof comply with LSP(liskov substitution principle - subclass & superclass equality, 
 * 			e.g., subclass has no additional property/var from superclass)
 * 		instanceof can break the symmetry relationship easily.
 * 		use instanceof in final class or atleast with final equals method, so that it can comply with LSP and also avoid any accidental break of 
 * 			symmetary relationship (equals contract)
 * 2.b - getClass() == ... tests whether the types are identical.(return the runtime class of this object)
 * 		getClass always comply with the equals contract but no way comply LSP.
 * 		use getClass and design with composition to solve the LSP problem here.
 * 
 * 		[ take away - use getClass that's what generated by eclipse ide also ]
 */
package com.san.ej.eq;

//Immutable class
class Point{
	private final int x,y;
	public Point(int x, int y){this.x=x;this.y=y;}
	@Override
	public boolean equals(Object o) {
		//broke LSV (Liskov substitution principle)
//		if(o==null || o.getClass()!=getClass())return false;
		//correct way
		if(!(o instanceof Point))return false;
		Point p = (Point)o;
		// conf - The idea of private class members (attributes, fields) is to
		// access them directly inside the declaring class (not instance!/any object's) only.
		return p.x==x && p.y==y;
	}
	public int hashCode(){return 31*x+y;}
}

enum Color { RED, ORANGE, YELLOW, GREEN, BLUE, INDIGO, VIOLET }

class ColorPoint extends Point{
	private final Color color;
	public ColorPoint(int x, int y, Color color) {super(x,y);this.color=color;}
	@Override
//	Broken - violates symmetry!
	public boolean equals(Object o) {
		if(!(o instanceof ColorPoint))return false;
		return super.equals(o) && color==((ColorPoint)o).color;
	}
}

public class EqualsContract {
	public static void main(String[] args) {
		Point p = new Point(3,4);
		ColorPoint cp = new ColorPoint(3,4,Color.RED);
		System.out.println(p instanceof ColorPoint);
		System.out.println(p.equals(cp) + ", " + cp.equals(p));
		
		//2. LSP
		Object o = new IdeGenPoint(2, 3);
		IdeGenPoint ip = new IdeGenPoint(2, 3);
		System.out.println(ip.getClass()+","+o.getClass());
		System.out.println((o instanceof IdeGenPoint) + ","+ (ip instanceof IdeGenPoint));
		System.out.println((o instanceof Object) + ","+ (ip instanceof Object));
		System.out.println(new IdeGenPoint(2,3).equals(o) + "," + o.equals(new IdeGenPoint(2,3)));
		
	}

}

/**
 * @author santosh
 *
 */
class IdeGenPoint{
	private final int x,y;
	public IdeGenPoint(int x, int y) {this.x=x;this.y=y;}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + x;
		result = prime * result + y;
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		IdeGenPoint other = (IdeGenPoint) obj;
		if (x != other.x)
			return false;
		if (y != other.y)
			return false;
		return true;
	}
	
	
}